/**
 * simple installer application to avoid manually configuring the application
 * just run the script. 
 * Logs are displayed in the console and in the log file of your workspace (toolbar > logs)
 */

var channel = require("channel");
var subdomain = require("subdomain");
var device = require("device");
var document = require("document");
var config = require("./config");
var log = require("log");
log.setLevel("info");

// create the eurotech channel
var isOk = createChannel(config.eurotechChannel, {subscribeACL: "authenticated", publishACL: "authenticated"});

// create the responseChannel channel
isOK = createChannel(config.dashboardChannel, {subscribeACL: "anonymous", publishACL: "authenticated"});

// subscribe the inject script to the eurotech channel
isOk = subscribeScriptToChannel("eurotech_simpleapp/api/inject", "eurotech");

// create a sub-domain
isOk = createSubdomain("eurotech");

// create a device and its token
isOk = createScriptrDevice();

// create an endpoint for eurotech
isOK = createExternalEndpoint();

// Create a bridge for that endpoint
isOK =  createBridge();

return isOK ? "Done." : "Completed with errors/warnings. Please check logs.";

function createChannel(name, options) {

    // create the eurotech channel = "";
    var msg = "";
    trace("Creating the " +  name + " channel...");
    var resp = channel.create(name, options);
    if (resp.metadata.status == "failure") {

        if (resp.metadata.errorCode == "DUPLICATE_CHANNEL") {

            msg = name + " channel already exists. Skipping this step.";
            trace(msg, "Warning");            
        } else {

            msg = "Failed to create the " +  name  + " channel. Please try manually.\n" + JSON.stringify(resp);
            trace(msg, "Error");           
        }

        return false;
    }else {

        msg = "Successfuly created the " + name  + " channel."
        trace(msg);
        return true;
    }
}

function subscribeScriptToChannel(script, channel) {

    trace("Subscribing " + script + " to channel " + channel + "...");
    var resp = subscribe(channel, script);
    if (resp.metadata.status == "failure") {

        if (resp.metadata.errorCode == "CALLBACK_SUBSCRIBED") {
            trace(script +  " already subscribed to " + channel + ". Skipping this step.", "Warning");
        }else {
            trace("Failed to subscribe " + script +  " to " + channel + ".\n" +  JSON.stringify(resp), "Error");
        }

        return false;
    }else {
        trace("Successfuly subscribed " + script +  " to " + channel);
        return true;
    }
}

function createSubdomain(prefix) {

    trace("Creating sub-domain...");
    var id = guid();
    var name = config.subdomain ? config.subdomain : prefix + "-" + id;
    var resp = subdomain.create(name);
    if (resp.metadata.status == "failure") {

        if (resp.metadata.errorCode == "MAX_SUBDOMAINS_EXCEEDED") {
            trace("A sub-domain already exists. Skipping this step.");            
        }else {
            trace("Failed to create subdomain " + name + ".\n" +  JSON.stringify(resp), "Error");
        }

        return false;
    }else {
        trace("Successfuly created subdomain " + name);
        return true;
    }
}

function createScriptrDevice() {

    trace("Saving device " + config.deviceId + "...");
    var resp = device.create({id: config.deviceId, name: config.deviceId, password: guid()});
    if (resp.metadata.status == "failure") {

        if (resp.metadata.errorCode == "DUPLICATE_DEVICE") {
            trace("Device " + config.deviceId +  " already exists. Skipping this step.", "Warning"); 
        }else {
            trace("Could not create device " + config.deviceId + ".\n" + JSON.stringify(resp), "Error");             
        }

        return false;   
    }else {

        resp = device.generateToken(config.deviceId);
        if (resp.metadata.status == "failure") {

            trace("Could not generate token for device " + config.deviceId 
                  + ".Please make sure to generate one manually.\n" + JSON.stringify(resp), "Warning");
            return false;
        }

        resp = document.save({key: config.deviceId, token: resp.result.token});
        if (resp.metadata.status == "failure") {

            trace("Could not persist token for device " + config.deviceId 
                  + ". Please make sure to persist one manually.\n" + JSON.stringify(resp), "Warning");
            return false;
        }

        trace("Device saved successfuly");
        return true;
    }
}

function createExternalEndpoint() {

    trace("Creating endpoint...");
    var externalEndpointParams = {

        "name" : config.endpointConfig.name,
        "protocol" : config.endpointConfig.protocol,
        "url" : config.endpointConfig.url,
        "port" : config.endpointConfig.port,
        "clientId" : config.endpointConfig.clientId,
        "username" : config.endpointConfig.username,
        "password" : config.endpointConfig.password,
        "topic" : config.endpointConfig.topic,
        "passphrase" : "",
    };

    var resp = apsdb.callApi("SaveExternalEndpointConfiguration", externalEndpointParams, null);
    if (resp.metadata.status == "failure") {

        if (resp.metadata.errorCode == "DUPLICATE_EXTERNAL_ENDPOINT") {
            trace("Endpoint already exists. Skipping this step.", "Warning");     
        }else {
            trace("Could not create endpoint.\n" + JSON.stringify(resp));    
        }

        return false;
    }

    trace("Endpoint successfuly created");
    return true;
}

function createBridge() {

    var resp = document.get(config.deviceId);
    if (resp.metadata.status == "failure") {

        trace("Could not load token document for device " + config.deviceId + "\n" + JSON.stringify(resp));
        return false;
    }

    var token = resp.result.token;    
    var addBridgeParams = {
        "channel" : config.eurotechChannel,
        "externalEndpointConfiguration" : config.endpointConfig.name,
        "auth_token" : token
    };

    resp = apsdb.callApi("AddBridge",addBridgeParams,null);
    if (resp.metadata.status == "failure") {

        trace("Could not create bridge. \n" + JSON.stringify(resp));
        return false;
    }
}

function trace(msg, level) {

    log.info(msg); 
    console.log((level ? level + " - " : "") + msg);
}

function guid() {

    var choice = "abcdefghijklmnopqrstuvwxyz0123456789";
    var id = "";
    for(var i = 0; i < 6; i++) {

        var pick = choice[Math.round(Math.random() * (choice.length - 1))];
        id += pick
    }

    return id;
}
