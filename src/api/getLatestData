/*
 * A simple API operation that asks for the latest data recorded for a given event type of a given device id
 * @module /api/getLatestData
 * @param {String} deviceId: the identifier of the device, optional, if not provied returns latest record of the given event type
 * @param {String} eventType: the type of event we are interested in ("moving" or "stop"), mandatory
 * @param {Boolean} formatData: when true, instructs the API to return the data in a format that can be understood by a map widget
 * @return {Object} latest data if successful, {errorCode: "xxx", errorDetail: "yyyy"} in case of failure
 */

var dataManager = require("../entities/datamanager");
var util = require("../entities/util");
try {
  
    // retrive the parameters from the request. If the latter is sent using wss, then the parameters are sent as a stringified
    // json with the following structure: {"body": {"param1":"value1", etc.}}, otherwise, they are found in request.parameters
    var parameters = {};
    if (request.parameters.body) {
        
        parameters = JSON.parse(request.parameters.body);
        if (typeof(parameters) == "string") { // this is to fix a bug in the map widget that stringifies the params object twice
            parameters = JSON.parse(parameters); 
        }
    }else {
        parameters = request.parameters;
    }
    
    // the deviceId is optional. this is useful when demoing the application for a single device with a simple dashboard
    var deviceId = parameters.deviceId;    
  
    var eventType = parameters.eventType;
    if (!eventType) {
        throw {
            
            errorCode: "Missing_Parameter",
            errorDetail: "The eventType parameter is mandatory"
        };
    }
    
    // invoke the datamanager to obtain the latest movement-related data
    var data = dataManager.getLatestData(deviceId, eventType);
    if (parameters.formatData == "true") {
        return util.formatData(data);
    }else {
        return data;
    }
}catch(exception){
    return exception;
}
