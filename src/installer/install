/**
 * simple installer application to avoid manually configuring the application
 * just run the script. 
 * Logs are displayed in the console and in the log file of your workspace (toolbar > logs)
 */

var channel = require("channel");
var subdomain = require("subdomain");
var device = require("device");
var document = require("document");
var config = require("./config");
var log = require("log");
log.setLevel("info");

const TOTAL_STEPS = 8;
const STORE_KEEPING_INTERVAL = 10; // in minutes

var errors = 0;
var warnings = 0;
var completedSteps = 0;

// step 1: create the eurotech channel
createChannel(config.eurotechChannel, {subscribeACL: "authenticated", publishACL: "authenticated"});

// step 2: create the responseChannel channel
createChannel(config.dashboardChannel, {subscribeACL: "anonymous", publishACL: "authenticated"});

// step 3: subscribe the inject script to the eurotech channel
subscribeScriptToChannel("eurotech_simpleapp/api/inject", "eurotech");

// step 4: create a sub-domain
createSubdomain("eurotech");

// step 5: create a device and its token
createScriptrDevice();

// step 6: create an endpoint for eurotech
createExternalEndpoint();

// step 7: create a bridge for that endpoint
createBridge();

// step 8: schedule the storekeeper to execute regularly
scheduleStoreKeeper();

if (errors > 0) {
    return "Installation failed with " + errors + " errors. Please check logs";
}

if (warnings > 0) {

    if (completedSteps ==  TOTAL_STEPS) {
        return "Installation successful but reported " + warnings + " warnings. Please check logs";
    }else {
        return " Inconsistent state with" + warnings + " warnings. Number of completed tasks is " + completedSteps + " over " + TOTAL_STEPS + ". Please check logs";
    }    
}

return "Installation successful. Number of completed tasks is " + completedSteps + " over " + TOTAL_STEPS;

function createChannel(name, options) {

    // create the eurotech channel = "";
    trace("Creating the " +  name + " channel...");
    var resp = channel.create(name, options);
    if (resp.metadata.status == "failure") {

        if (resp.metadata.errorCode == "DUPLICATE_CHANNEL") {

            trace(name + " channel already exists. Skipping this step.", "Warning");            
            return stepComplete(true);
        } else {

            trace("Failed to create the " +  name  + " channel. Please try manually.\n" + JSON.stringify(resp), "Error");  
            return stepFailed();
        }
    }else {

        trace("Successfully created the " + name  + " channel.");
        return stepComplete(false);
    }
}

function subscribeScriptToChannel(script, channel) {

    trace("Subscribing " + script + " to channel " + channel + "...");
    var resp = subscribe(channel, script);
    if (resp.metadata.status == "failure") {

        if (resp.metadata.errorCode == "CALLBACK_SUBSCRIBED") {

            trace(script +  " already subscribed to " + channel + ". Skipping this step.", "Warning");
            return stepComplete(true);
        }else {

            trace("Failed to subscribe " + script +  " to " + channel + ".\n" +  JSON.stringify(resp), "Error");
            return stepFailed();
        }
    }else {        

        trace("Successfully subscribed " + script +  " to " + channel);  
        return stepComplete(false);
    }
}

function createSubdomain(prefix) {

    trace("Creating sub-domain...");
    var id = guid();
    var name = config.subdomain ? config.subdomain : prefix + "-" + id;
    var resp = subdomain.create(name);
    if (resp.metadata.status == "failure") {

        if (resp.metadata.errorCode == "MAX_SUBDOMAINS_EXCEEDED") {

            trace("A sub-domain already exists. Skipping this step.", "Warning");            
            return stepComplete(true);
        }else {
            trace("Failed to create subdomain " + name + ".\n" +  JSON.stringify(resp), "Error");
            return stepFailed();
        }
    }else {
        trace("Successfully created subdomain " + name);
        return stepComplete(false);
    }
}

function createScriptrDevice() {

    trace("Saving device " + config.deviceId + "...");
    var resp = device.create({id: config.deviceId, name: config.deviceId, password: guid()});
    if (resp.metadata.status == "failure") {

        if (resp.metadata.errorCode == "DUPLICATE_DEVICE") {

            trace("Device " + config.deviceId +  " already exists. Skipping this step.", "Warning"); 
            return stepComplete(true);
        }else {

            trace("Could not create device " + config.deviceId + ".\n" + JSON.stringify(resp), "Error");             
            return stepFailed();
        }
    }else {
        return generateToken(config.deviceId);
    }
}

function createExternalEndpoint() {

    trace("Creating endpoint...");
    var externalEndpointParams = {

        "name" : config.endpointConfig.name,
        "protocol" : config.endpointConfig.protocol,
        "url" : config.endpointConfig.url,
        "port" : config.endpointConfig.port,
        "clientId" : config.endpointConfig.clientId,
        "username" : config.endpointConfig.username,
        "password" : config.endpointConfig.password,
        "topic" : config.endpointConfig.topic,
        "passphrase" : "",
    };

    var resp = apsdb.callApi("SaveExternalEndpointConfiguration", externalEndpointParams, null);
    if (resp.metadata.status == "failure") {

        if (resp.metadata.errorCode == "DUPLICATE_EXTERNAL_ENDPOINT") {

            trace("Endpoint already exists. Skipping this step.", "Warning");     
            return stepComplete(true);
        }else {

            trace("Could not create endpoint.\n" + JSON.stringify(resp), "Error");    
            return stepFailed();
        }    
    }

    trace("Endpoint successfully created");
    return stepComplete(false);
}

function generateToken(deviceId) {

    var resp = device.regenerateToken(config.deviceId);
    if (resp.metadata.status == "failure") {

        trace("Could not generate token for device " + config.deviceId 
              + ". Please make sure to generate one manually and launch installer again.\n" + JSON.stringify(resp), "Error");
        return stepFailed();
    }

    trace("Token generated successfully.");
    resp = document.save({key: config.deviceId, token: resp.result.token});
    if (resp.metadata.status == "failure") {

        trace("Could not persist token for device " + config.deviceId 
              + ". Please make sure to persist one manually using " + config.deviceId + " as document key.\n" + JSON.stringify(resp), "Error");
        return stepFailed();
    }

    trace("Token saved successfully");
    return stepComplete(false);
}

function createBridge() {

    trace("Creating bridge...");
    var resp = document.get(config.deviceId);
    if (resp.metadata.status == "failure") {

        trace("Could not load token document for device " + config.deviceId + "\n" + JSON.stringify(resp), "Warning");
        trace("Will try to regenerate token");
        return generateToken(config.deviceId);
    }

    var token = resp.result.token;    
    var addBridgeParams = {
        "channel" : config.eurotechChannel,
        "externalEndpointConfiguration" : config.endpointConfig.name,
        "auth_token" : token
    };

    resp = apsdb.callApi("AddBridge", addBridgeParams,null);
    if (resp.metadata.status == "failure") {

        if (resp.metadata.errorCode == "BRIDGE_ALREADY_EXISTS") {

            trace("Bridge already exists. Skipping this step.", "Warning");
            return stepComplete(true);
        }else {

            trace("Could not create bridge. \n" + JSON.stringify(resp), "Error");
            return stepFailed();
        }
    }

    trace("Bridge created successfully");
    return stepComplete(false);
}

function scheduleStoreKeeper() {

    // do not schedule is script already scheduled
    trace("Scheduling eurotech_simpleapp/installer/storekeeper script to execute regularly");
    var resp = document.query({query:'apsST_scriptName = "eurotech_simpleapp/installer/storekeeper"', fields:"key"});
    if (resp.metadata.status == "failure") {
        trace("Problem occured while checking if storekeeper was scheduled. This might lead to scheduling the script more than once.\n" 
              + JSON.stringify(resp), "WARNING");
    }

    if (resp.result.documents.length == 0) {

        resp = schedule("eurotech_simpleapp/installer/storekeeper", "0/" +  STORE_KEEPING_INTERVAL + " * * * ?");
        if (resp.metadata.status == "failure") { 

            trace("Could not schedule the execution of the installer/storekeeper script. Please schedule manually.\n" + JSON.stringify(resp), "Warning");
            return stepComplete(true);
        }else {

            trace("eurotech_simpleapp/installer/storekeeper script successfully scheduled. Handle is: " + resp.result.handle);
            return stepComplete(false);
        }
    }else {

        trace("storekeeper script already scheduled. Skipping this step.", "Warning");
        return stepComplete(true);
    }
}

function trace(msg, level) {

    log.info(msg); 
    console.log((level ? level + " - " : "") + msg);
}

function guid() {

    var choice = "abcdefghijklmnopqrstuvwxyz0123456789";
    var id = "";
    for(var i = 0; i < 6; i++) {

        var pick = choice[Math.round(Math.random() * (choice.length - 1))];
        id += pick
    }

    return id;
}

function stepComplete(withWarning) {

    if(withWarning) {
        warnings++;
    }

    completedSteps++;
    return completedSteps;
}

function stepFailed() {
    return ++errors;
}
